/**
 * Expose `AsteroidEditorExtension`.
 */

module.exports = AsteroidEditorExtension;

/**
 * Module dependencies.
 */
 
var EventEmitter = require('events').EventEmitter
  , debug = require('debug')('asteroid-editor-extension')
  , util = require('util')
  , inherits = util.inherits
  , assert = require('assert')
  , path = require('path')
  , asteroid = require('asteroid')
  , ejs = require('ejs-locals');
  
/**
 * Create a new `AsteroidEditorExtension` with the given `options`.
 *
 * @param {Object} options
 * @return {AsteroidEditorExtension}
 */

function AsteroidEditorExtension(options) {
  EventEmitter.apply(this, arguments);
  
  // throw an error if args are not supplied
  // assert(typeof options === 'object', 'AsteroidEditorExtension requires an options object');
  
  this.options = options;

  var self = this;

  this.app = asteroid();

  this.name = this.options._name;
  this.layout = this.options.layout || '/layouts/layout.ejs';
  
  debug('created with options', options);

  this.app.engine('ejs', ejs);

  // Replace the render function; we want to render the editor layout
  var oldViewDir = this.app.get('views'),
      oldRender = this.app.render,
      app = this.app;

  app.render = function render(view, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};  
    }

    options.locals = options.locals || {};

    oldRender.call(app, view, options, function(err, body) {
      if (err) return callback(err);
      options._body = body;
      oldRender.call(app, path.join(oldViewDir, self.layout), options, function(err, html) {
        callback(err, html);
      });
    });
  };

  // Set views directory to be relative to the module
  if (this.options._path) {
    this.app.set('views', path.join(path.dirname(this.options._path), "/views"));
    this.app.use(asteroid.static(path.join(path.dirname(this.options._path), '/public')));
  }
  
  debug('created with options', options);
}

/**
 * Inherit from `EventEmitter`.
 */

inherits(AsteroidEditorExtension, EventEmitter);

/**
 * Simplified APIs
 */

AsteroidEditorExtension.create =
AsteroidEditorExtension.createAsteroidEditorExtension = function () {
  // add simplified construction / sugar here
  return new AsteroidEditorExtension();
}

/**
 * Methods.
 */
 
AsteroidEditorExtension.prototype.handle = function(url, rootUrl, req, res, next) {
  var oldUrl = req.url;
  req.url = url;
  req.rootUrl = res.viewLocals.rootUrl = rootUrl;
  req.absoluteUrl = res.viewLocals.absoluteUrl = oldUrl;
  var _next = function() {
    req.url = oldUrl;
    next();
  };

  this.app(req, res, _next);
};