/**
 * Expose `LoopbackEditorUtility`.
 */

module.exports = LoopbackEditorUtility;

/**
 * Module dependencies.
 */
 
var EventEmitter = require('events').EventEmitter
  , debug = require('debug')('loopback-editor-utility')
  , LoopbackEditorExtension = require('loopback-editor-extension')
  , util = require('util')
  , inherits = util.inherits
  , assert = require('assert');
  
/**
 * Create a new `LoopbackEditorUtility` with the given `options`.
 *
 * @param {Object} options
 * @return {LoopbackEditorUtility}
 */

function LoopbackEditorUtility(options) {
  options.layout = options.layout || '/layouts/editor-layout.ejs';
  LoopbackEditorExtension.apply(this, arguments);
  
  this.options = options || {};

  this.views = this.options.views;
  
  // throw an error if args are not supplied
  // assert(typeof options === 'object', 'LoopbackEditorUtility requires an options object');
  
  debug('created with options', options);
}

/**
 * Inherit from `EventEmitter`.
 */

inherits(LoopbackEditorUtility, LoopbackEditorExtension);

/**
 * Simplified APIs
 */

LoopbackEditorUtility.create =
LoopbackEditorUtility.createLoopbackEditorUtility = function () {
  // add simplified construction / sugar here
  return new LoopbackEditorUtility();
}

/**
 * Methods.
 */
 
LoopbackEditorUtility.prototype.myMethod = function () {
  throw new Error('LoopbackEditorUtility.myMethod not implemented');
}