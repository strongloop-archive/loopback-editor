/**
 * Expose `LoopbackSubEditor`.
 */

module.exports = LoopbackSubEditor;

/**
 * Module dependencies.
 */
 
var EventEmitter = require('events').EventEmitter
  , debug = require('debug')('loopback-sub-editor')
  , LoopbackEditorExtension = require('loopback-editor-extension')
  , util = require('util')
  , inherits = util.inherits
  , assert = require('assert')
  , path = require('path');
  
/**
 * Create a new `LoopbackSubEditor` with the given `options`.
 *
 * @param {Object} options
 * @return {LoopbackSubEditor}
 */

function LoopbackSubEditor(options) {
  options.layout = options.layout || '/layouts/sub-editor-layout.ejs';

  LoopbackEditorExtension.apply(this, arguments);
  
  // throw an error if args are not supplied
  // assert(typeof options === 'object', 'LoopbackSubEditor requires an options object');
  
  this.options = options;
  
  debug('created with options', options);
}

/**
 * Inherit from `EventEmitter`.
 */

inherits(LoopbackSubEditor, LoopbackEditorExtension);

/**
 * Simplified APIs
 */

LoopbackSubEditor.create =
LoopbackSubEditor.createLoopbackSubEditor = function () {
  // add simplified construction / sugar here
  return new LoopbackSubEditor();
}

/**
 * Methods.
 */
 
LoopbackSubEditor.prototype.getIconPath = function() {
  if (this.options._path && this.options.icon) {
    return path.join(path.dirname(this.options._path), this.options.icon);
  }
}