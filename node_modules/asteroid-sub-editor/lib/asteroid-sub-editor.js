/**
 * Expose `AsteroidSubEditor`.
 */

module.exports = AsteroidSubEditor;

/**
 * Module dependencies.
 */
 
var EventEmitter = require('events').EventEmitter
  , debug = require('debug')('asteroid-sub-editor')
  , util = require('util')
  , inherits = util.inherits
  , assert = require('assert')
  , path = require('path');
  
/**
 * Create a new `AsteroidSubEditor` with the given `options`.
 *
 * @param {Object} options
 * @return {AsteroidSubEditor}
 */

function AsteroidSubEditor(options) {
  EventEmitter.apply(this, arguments);
  
  // throw an error if args are not supplied
  // assert(typeof options === 'object', 'AsteroidSubEditor requires an options object');
  
  this.options = options;

  this.name = this.options._name;
  
  debug('created with options', options);
}

/**
 * Inherit from `EventEmitter`.
 */

inherits(AsteroidSubEditor, EventEmitter);

/**
 * Simplified APIs
 */

AsteroidSubEditor.create =
AsteroidSubEditor.createAsteroidSubEditor = function () {
  // add simplified construction / sugar here
  return new AsteroidSubEditor();
}

/**
 * Methods.
 */
 
AsteroidSubEditor.prototype.getIconPath = function() {
  if (this.options._path && this.options.icon) {
    return path.join(path.dirname(this.options._path), this.options.icon);
  }
}